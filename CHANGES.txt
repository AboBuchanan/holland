=======
CHANGES
=======

1.1.0a2 - May 21, 2011
----------------------
holland/contrib
+++++++++++++++
- Updated debian and rpm packages

holland/docs
++++++++++++
- Documentation added for all plugins (Thanks to m00dawg)

holland.core
++++++++++++
- Fixed a divide by zero error in space estimation when an estimation method
  estimated zero bytes for the backup size. Fixes LP#782807 (Thanks to derks)
- Fixed some tracebacks that could be generated by the config package due to
  incorrectly tracking the source location of a config option.
- Added a "noop" backup plugin that does nothing at all.  This is used for
  testing holland internals but may have other uses in the future.
- Backup times are now compared via a .timestamp file in the backup directory
  rather than solely relying on the main parent directory timestamp

holland.cli
+++++++++++
- Fixed a bug where holland.conf validation errors were not being caught and
  resulted in an ugly stack trace
- holland.cli no longer uses python's logging directly for command stderr/out
  Fixes LP#782871
- Fixed a bug in holland backup --skip-hooks where hooks were not being skipped
  correctly.

holland-delphini
++++++++++++++++
- Added new "delphini" plugin to provide basic support for aggregating native
  mysql cluster backups

holland-mysqldump
+++++++++++++++++
- Fixed bug in correctly detecting lock method when using file-per-database
- Added transactional-{engines,databases,tables}-override parameter. This
  allows fine-tuning the mysqldump plugin's --single-transaction test.
- Added lockless-only option to abort a backup if mysqldump would use a
  lock method that would explicitly lock any tables.
- Fixed a bug where the mysqldump plugin sometimes tried to double encode
  unicode tablenames before passing to the mysqldump command.

holland-pgdump
++++++++++++++
- Cleaned up several cases where early holland 1.1 apis were still being used
  even though the API had changed

holland-script
++++++++++++++
- Added new script backup plugin to allow running arbitrary commands during a backup.

holland-random
++++++++++++++
- Updated the example "random" plugin to work with the holland 1.1 backup api
- Use /dev/urandom rather than /dev/random to avoid blocking (Thanks to derks)
- Added tests (Thanks to derks)

holland-sqlite
++++++++++++++
- Updated the sqlite plugin to work with the holland 1.1 backup api
  (Thanks to derks)
- Added tests (Thanks to derks)


1.1.0a1 - Apr 2, 2011
---------------------
holland.core
++++++++++++
- Refactored holland command line functionality from holland.core
  into a separate holland.cli module
- holland.core.backports have been moved into holland.cli. Any compatibility
  or portability concerns regarding 3rd party modules are now considered a
  frontend responsibility
- holland.core.commands have been reimplemented and moved into the holland.cli
  package
- holland.core.config has been reimplemented and moved into the holland.cli
  package
- Forked django.dispatch into holland.core.dispatch to provide a robust
  and general callback mechanism.  Hooks will be implemented on top of
  this support.

holland.core.plugin
+++++++++++++++++++
- New implementation of holland.core.plugin
- holland.core.plugin.BasePlugin exposes a standard interface for
  all holland plugins. holland.core framework interfaces that support
  plugins will now expose some subclass of holland.core.plugin.BasePlugin
- BasePlugin.plugin_info now supports an api versioning mechanism.  Plugins
  should now return provide an api_version attribute in their plugin_info()
  that matches the version of holland they were designed against. See the
  documentation for further details.
- holland.core.plugin.PluginManager exposes a standard for loading
  plugins.  The default implementation now abstracts away pkg_resources'
  entrypoints via EntrypointPluginManager
  Entrypoints have been abstracted behind a new interface in
  holland.core.plugin.PluginManager

holland.cli
+++++++++++
- Added new holland.cli package for the holland command frontend
- Added holland.cli.cmd package to expose a pluggable command API

holland.devtools
++++++++++++++++
- Added new devtools package to assist with plugin development
- Added basic python-paster template to create a new backup plugin
  with holland:backup

holland-mysqldump
+++++++++++++++++
- Refactored mysqldump plugin to use the new BackupPlugin interface in 1.1
- file-per-database now supports parallel execution controlled by the
  mysqldump.parallelism setting (default: 1)
